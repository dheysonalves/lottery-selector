import { createSlice } from "@reduxjs/toolkit";
import {
	IContestResponseTypes,
	ILotteryContestResponseTypes,
	ILotteryResponseTypes,
} from "../../../@types/lotery";
import { RootState } from "../../../app/store";
import { fetchContestsThunk, fetchLotteryContestsThunk, fetchLotteryThunk } from "./lotteryThunk";

export interface LotteryState {
	lotteryData: ILotteryResponseTypes[] | null;
	lotteryContestData: ILotteryContestResponseTypes[] | null;
	contestData: IContestResponseTypes | null;
	status: "idle" | "loading" | "failed";
	error: boolean;
}

const initialState: LotteryState = {
	lotteryData: [],
	lotteryContestData: [],
	contestData: null,
	status: "idle",
	error: false,
};

export const lotterySlice = createSlice({
	name: "lottery",
	initialState,
	// The `reducers` field lets us define reducers and generate associated actions
	reducers: {},
	// The `extraReducers` field lets the slice handle actions defined elsewhere,
	// including actions generated by createAsyncThunk or in other slices.
	extraReducers: (builder) => {
		builder
			.addCase(fetchLotteryThunk.pending, (state) => {
				state.status = "loading";
				state.lotteryData = [];
				state.error = false;
			})
			.addCase(fetchLotteryThunk.fulfilled, (state, action) => {
				state.status = "idle";
				state.lotteryData = action.payload;
				state.error = false;
			})
			.addCase(fetchLotteryThunk.rejected, (state, action) => {
				state.status = "idle";
				state.lotteryData = [];
				state.error = true;
			});
		builder
			.addCase(fetchLotteryContestsThunk.pending, (state) => {
				state.status = "loading";
				state.lotteryContestData = [];
			})
			.addCase(fetchLotteryContestsThunk.fulfilled, (state, action) => {
				state.status = "idle";
				state.lotteryContestData = action.payload;
			});
		builder
			.addCase(fetchContestsThunk.pending, (state) => {
				state.status = "loading";
				state.contestData = null;
			})
			.addCase(fetchContestsThunk.fulfilled, (state, action) => {
				state.status = "idle";
				state.contestData = action.payload;
			});
	},
});

export const selectLottery = (state: RootState) => state.lottery;

export default lotterySlice.reducer;

